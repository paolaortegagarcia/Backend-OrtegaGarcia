describe("Conjunto de tests Products", () => {
    /* -------------------------------- Products -------------------------------- */
    beforeAll(async () => {
        await initMongoDB.dropProductsCollection();
    });

    test("[POST] /api/products", async () => {
        const doc = {
            name: fakerES.commerce.productName(),
            description: fakerES.commerce.productDescription(),
            price: fakerES.commerce.price(),
            stock: fakerES.number.int({ min: 0, max: 100 }),
            code: uuidv4(),
            category: fakerES.commerce.productAdjective(),
        };
        const response = await request(app).post("/api/products").send(doc);
        //console.log("response-->", response.body);
        const id = response.body.data.newItem._id;
        const nameResponse = response.body.data.newItem.name;
        expect(id).toBeDefined();
        expect(response.body.data.newItem).toHaveProperty("_id");
        expect(nameResponse).toBe(doc.name);
        expect(response.body.data.newItem.body).toEqual(doc.body);
        expect(response.statusCode).toBe(200);

        const incompleteProduct = {
            name: fakerES.commerce.productName(),
        };
        const responseIncompleteProduct = await request(app)
            .post("/api/products")
            .send(incompleteProduct);
        expect(responseIncompleteProduct.statusCode).toBe(404);
    });

    test("[GET] /api/products/all", async () => {
        const response = await request(app).get("/api/products/all");
        console.log("response-->", response.body);
        expect(response.statusCode).toBe(200);
        expect(response.body.data).toHaveLength(1);
        expect(response.body.data).toBeInstanceOf(Array);
    });

    test("[GET] /api/products/:id", async () => {
        const doc = {
            name: fakerES.commerce.productName(),
            description: fakerES.commerce.productDescription(),
            price: fakerES.commerce.price(),
            stock: fakerES.number.int({ min: 0, max: 100 }),
            code: uuidv4(),
            category: fakerES.commerce.productAdjective(),
        };
        const response = await request(app).post("/api/products").send(doc);
        const id = response.body.data.newItem._id;
        console.log(id);
        expect(id).toBeDefined();
        expect(response.body.data.newItem).toHaveProperty("_id");
        const responseGet = await request(app).get(`/api/products/${id}`);
        expect(responseGet.statusCode).toBe(200);
        expect(responseGet.body.title).toEqual(doc.title);

        // ID equivocado
        const idFaker = "10de7f1f3fd033f11d434acb";
        const responseGetFail = await request(app).get(
            `/api/products/${idFaker}`
        );
        console.log(responseGetFail);
        const msgError =
            '{"status":404,"message":"Not Found","error":"Error fetching items"}';
        console.log(responseGetFail.error.text);
        expect(responseGetFail.error.text).toEqual(msgError);
        expect(responseGetFail.statusCode).toBe(404);
    });

    test("[PUT] /api/products/:id", async () => {
        const doc = {
            name: fakerES.commerce.productName(),
            description: fakerES.commerce.productDescription(),
            price: fakerES.commerce.price(),
            stock: fakerES.number.int({ min: 0, max: 100 }),
            code: uuidv4(),
            category: fakerES.commerce.productAdjective(),
        };
        const response = await request(app).post("/api/products").send(doc);
        const id = response.body.data.newItem._id;
        console.log(id);
        expect(id).toBeDefined();
        expect(response.body.data.newItem).toHaveProperty("_id");

        const doc2 = {
            name: "test",
            description: "test",
            price: 200,
            stock: 100,
            code: uuidv4(),
            category: "test",
        };
        const responsePut = await request(app)
            .put(`/api/products/${id}`)
            .send(doc2);
        console.log("RESPONSEPUT", responsePut.body);
        expect(responsePut.statusCode).toBe(200);
        expect(responsePut.body.data.itemUpd._id).toBeDefined();
        expect(responsePut.body.data.itemUpd.title).toBe(doc2.title);
    });

    test("[DELETE] /api/products/:id", async () => {
        const doc = {
            name: fakerES.commerce.productName(),
            description: fakerES.commerce.productDescription(),
            price: fakerES.commerce.price(),
            stock: fakerES.number.int({ min: 0, max: 100 }),
            code: uuidv4(),
            category: fakerES.commerce.productAdjective(),
        };
        const response = await request(app).post("/api/products").send(doc);
        const id = response.body.data.newItem._id;
        console.log(id);
        expect(id).toBeDefined();
        expect(response.body.data.newItem).toHaveProperty("_id");

        const responseDel = await request(app).delete(`/api/products/${id}`);
        expect(responseDel.statusCode).toBe(200);
    });
});